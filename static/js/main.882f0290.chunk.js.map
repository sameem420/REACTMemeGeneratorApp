{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","src","alt","width","MemeGenerator","state","topText","bottomText","randomImage","allMemeImages","changeHandler","bind","submitHandler","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","htmlToImage","document","getElementById","blob","FileSaver","saveAs","className","onSubmit","type","placeholder","onChange","id","onClick","downloadMeme","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8NAeeA,MAbf,WACI,OACI,mCACI,qBACIC,IAAI,yCACJC,IAAI,aACJC,MAAM,QAEV,mD,sEC0DGC,E,kDA9DX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,QAAU,GACVC,WAAa,GACbC,YAAc,gCACdC,cAAgB,IAEpB,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBATX,E,gEAYO,IAAD,OAChBE,MAAM,qCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACRE,EAASF,EAASG,KAAlBD,MACP,EAAKE,SAAS,CACVV,cAAeQ,S,oCAKbG,GAAQ,IAAD,EACKA,EAAMC,OAArBC,EADU,EACVA,KAAMC,EADI,EACJA,MACbC,KAAKL,SAAL,eACKG,EAAQC,M,oCAGHH,GACVA,EAAMK,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKnB,MAAMI,cAAcqB,QAC9DC,EAAcP,KAAKnB,MAAMI,cAAciB,GAASM,IACtDR,KAAKL,SAAS,CAAEX,YAAauB,M,qCAG7BE,IAAmBC,SAASC,eAAe,YAC1CrB,MAAK,SAAUsB,GACZC,IAAUC,OAAOF,EAAM,oB,+BAI3B,OACI,gCACI,uBAAMG,UAAU,YAAYC,SAAUhB,KAAKZ,cAA3C,UACI,uBAAO6B,KAAK,OAAOnB,KAAK,UAAUoB,YAAY,WAAWnB,MAAOC,KAAKnB,MAAMC,QAASqC,SAAUnB,KAAKd,gBACnG,uBAAO+B,KAAK,OAAOnB,KAAK,aAAaoB,YAAY,cAAcnB,MAAOC,KAAKnB,MAAME,WAAYoC,SAAUnB,KAAKd,gBAC5G,iDAEJ,qBAAKkC,GAAG,kBAAR,SACI,wBAAQA,GAAG,kBAAkBC,QAASrB,KAAKsB,aAA3C,6BAEJ,sBAAKP,UAAU,OAAOK,GAAG,UAAzB,UACI,qBAAK3C,IAAKuB,KAAKnB,MAAMG,YAAaN,IAAI,KACtC,oBAAIqC,UAAU,MAAd,SAAqBf,KAAKnB,MAAMC,UAChC,oBAAIiC,UAAU,SAAd,SAAwBf,KAAKnB,MAAME,uB,GAxD3BwC,IAAMC,W,MCQnBC,MATf,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1B,SAASC,eAAe,SAM1Be,K","file":"static/js/main.882f0290.chunk.js","sourcesContent":["import './style.css';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header>\r\n            <img \r\n                src=\"https://i.ibb.co/8mkZ00b/Trollface.png\" \r\n                alt=\"Troll Face\"\r\n                width=\"150\"\r\n            />\r\n            <p>Meme Generator</p>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './style.css';\r\nimport * as htmlToImage from 'html-to-image';\r\nimport FileSaver from 'file-saver';\r\n\r\nclass MemeGenerator extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            topText : \"\",\r\n            bottomText : \"\",\r\n            randomImage : \"http://i.imgflip.com/1bij.jpg\",\r\n            allMemeImages : []\r\n        }\r\n        this.changeHandler = this.changeHandler.bind(this);\r\n        this.submitHandler = this.submitHandler.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            const {memes} = response.data\r\n            this.setState({\r\n                allMemeImages: memes\r\n            })\r\n        });\r\n    }\r\n\r\n    changeHandler(event) {\r\n        const {name, value} = event.target;\r\n        this.setState({\r\n            [name] : value\r\n        })\r\n    }\r\n    submitHandler(event) {\r\n        event.preventDefault();\r\n        const randNum = Math.floor(Math.random() * this.state.allMemeImages.length);\r\n        const randMemeImg = this.state.allMemeImages[randNum].url;\r\n        this.setState({ randomImage: randMemeImg });\r\n    }\r\n    downloadMeme() {\r\n        htmlToImage.toBlob(document.getElementById('memeImg'))\r\n        .then(function (blob) {\r\n            FileSaver.saveAs(blob, 'memeImg.png');\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"meme-form\" onSubmit={this.submitHandler}>\r\n                    <input type=\"text\" name=\"topText\" placeholder=\"Top Text\" value={this.state.topText} onChange={this.changeHandler} />\r\n                    <input type=\"text\" name=\"bottomText\" placeholder=\"Bottom Text\" value={this.state.bottomText} onChange={this.changeHandler} />   \r\n                    <button>Generate</button>\r\n                </form>\r\n                <div id=\"downloadSection\">\r\n                    <button id=\"btnDownloadMeme\" onClick={this.downloadMeme}>Download Meme</button>\r\n                </div>\r\n                <div className=\"meme\" id=\"memeImg\">\r\n                    <img src={this.state.randomImage} alt=\"\" />\r\n                    <h2 className=\"top\">{this.state.topText}</h2>\r\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default MemeGenerator;","import Header from './Header';\nimport MemeGenerator from './MemeGenerator';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <MemeGenerator/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}